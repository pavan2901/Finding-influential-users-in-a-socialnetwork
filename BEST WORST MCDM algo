The Best-Worst Method provides a simple and intuitive approach for decision-makers to prioritize alternatives based on multiple criteria. 
It allows for capturing both the positive and negative aspects of the alternatives, providing a more comprehensive evaluation. 
By considering the best and worst options, the method helps in identifying the most favorable and unfavorable alternatives in a systematic and structured manner.



import pandas as pd
import networkx as nx
import numpy as np
from sklearn.preprocessing import MinMaxScaler
import time

# Read the data from an Excel file
start_time = time.time()
df = pd.read_excel('pseudo_facebook3.xlsx')

# Create a network graph from the data
G = nx.from_pandas_edgelist(df, source='A', target='B')

# Calculate the centrality measures
closeness = nx.closeness_centrality(G)
degree = dict(G.degree())
eigenvector = nx.eigenvector_centrality(G)
betweenness = nx.betweenness_centrality(G)

# Combine the centrality measures using a weighted sum
weights = [0.2, 0.2, 0.3, 0.3]
#centrality = np.array([list(closeness.values()), list(degree.values()), list(eigenvector.values()), list(betweenness.values())])
#centrality = MinMaxScaler().fit_transform(centrality.T)
#scores = np.dot(centrality, weights)

# Rank the users based on their scores
#ranks = np.argsort(scores)[::-1]

# Use the Best Worst Method MCDM algorithm to select the most influential users
best = np.max(centrality, axis=0)
worst = np.min(centrality, axis=0)
best_worst = np.vstack((best, worst))
scores_normalized = (centrality - worst) / (best - worst)
scores_normalized = np.dot(scores_normalized, weights)
ranks_best_worst = np.argsort(scores_normalized)[::-1]

# Select the most influential users based on their ranks
influential_users = ranks_best_worst[:10]

# Print the top 10 influential users
print(influential_users)

#to print run time
end_time = time.time()
run_time = end_time - start_time
print("The run time is: ", run_time, " seconds.")
